using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using AuthGateway.OATH;

using NUnit.Framework;


namespace AuthGateway.OATH.Unittest
{

	[TestFixture]
	public class Test_HotpTotp
	{

		private string testKey = "12345678901234567890";
		[Test]
		public void TestHTOP()
		{
			int[] results = {
				755224,
				287082,
				359152,
				969429,
				338314,
				254676,
				287922,
				162583,
				399871,
				520489,
				403154
			};
			for (int I = 0; I <= 10; I++) {
				Assert.AreEqual(results[I].ToString(), HotpTotp.HOTP(testKey, I));
			}
		}

		[Test]
		public void TestTOTP()
		{
			string value = HotpTotp.TOTP(testKey, 8, 20);
			int valueChanges = 0;
			for (int I = 0; I <= 100000; I++) {
				string newTotp = HotpTotp.TOTP(testKey, 8, 20);
				if ((!newTotp.Equals(value))) {
					valueChanges += 1;
					value = newTotp;
				}
			}
			Assert.IsTrue(valueChanges <= 1);
		}

		[Test]
		public void TestHTOP_hotpjs()
		{
			// Unit test to check: http://www.stevenwright.co.uk/hotp.html
			// NOTE: I had to correct results8(46) as it was returning a wrong value in the original test
			// In htop.js there's a bug in the following line:
			//  v = v.substr(v.length - p, p);
			// Since v.length = 7 the calculation v.length - p yields -1 and so it returns only "2"
			// which is the last character as truncated value

			string[] results6 = {
				"996291",
				"765650",
				"360231",
				"952025",
				"696972",
				"945857",
				"990849",
				"861838",
				"398671",
				"155672",
				"865892",
				"703919",
				"383323",
				"100750",
				"832948",
				"944619",
				"056896",
				"537204",
				"960255",
				"569783",
				"633360",
				"799018",
				"132480",
				"380856",
				"266378",
				"942488",
				"548559",
				"199225",
				"323446",
				"143557",
				"263252",
				"504693",
				"595137",
				"268807",
				"476467",
				"561365",
				"898248",
				"400436",
				"790098",
				"228293",
				"546915",
				"008273",
				"683659",
				"213288",
				"488707",
				"801156",
				"534832",
				"929019",
				"102145",
				"872240",
				"101459",
				"540981",
				"380351",
				"294966",
				"620007",
				"590314",
				"855233",
				"615697",
				"235881",
				"606639",
				"150160",
				"021709",
				"659316",
				"664059",
				"235805",
				"792970",
				"448900",
				"238360",
				"312436",
				"111673",
				"942393",
				"293854",
				"701586",
				"870472",
				"406433",
				"068590",
				"411136",
				"567933",
				"120617",
				"272953",
				"730496",
				"487001",
				"401682",
				"925438",
				"303104",
				"078052",
				"296373",
				"101936",
				"734516",
				"968540",
				"005948",
				"868758",
				"515748",
				"869917",
				"522982",
				"513679",
				"999786",
				"553758",
				"520766",
				"762821",
				"384028",
				"021759",
				"620049",
				"584669",
				"408956",
				"214636",
				"610209",
				"600398",
				"276981",
				"270896",
				"603124",
				"586771",
				"475716",
				"035250",
				"661344",
				"653513",
				"022362",
				"574231",
				"428357",
				"546606",
				"195414",
				"061257",
				"061921",
				"239774",
				"535071",
				"267570",
				"441414",
				"756637",
				"293422",
				"016885",
				"196211",
				"006330",
				"384365",
				"290901",
				"735530",
				"937926",
				"449801",
				"662804",
				"548359",
				"219194",
				"793879",
				"264324",
				"477772",
				"934150",
				"417215",
				"937687",
				"431823",
				"504037",
				"045903",
				"204039",
				"998071",
				"191820",
				"258040",
				"485183",
				"703495",
				"771150",
				"763638",
				"178151",
				"358083",
				"522967",
				"362955",
				"902856",
				"437388",
				"850502",
				"501602",
				"541963",
				"309027",
				"430731",
				"877335",
				"955560",
				"327245",
				"019951",
				"069992",
				"206110",
				"747575",
				"818347",
				"283152",
				"644314",
				"568879",
				"420538",
				"647807",
				"478681",
				"522791",
				"648560",
				"132132",
				"050937",
				"279632",
				"467190",
				"357414",
				"667459",
				"893215",
				"877204",
				"171556",
				"391376",
				"431345",
				"606549",
				"192025",
				"976894",
				"790997",
				"636765"
			};

			// Corrected "2" to "06534832"
			string[] results8 = {
				"66996291",
				"94765650",
				"23360231",
				"40952025",
				"41696972",
				"89945857",
				"33990849",
				"66861838",
				"47398671",
				"13155672",
				"58865892",
				"24703919",
				"10383323",
				"96100750",
				"19832948",
				"72944619",
				"82056896",
				"25537204",
				"81960255",
				"73569783",
				"40633360",
				"73799018",
				"44132480",
				"95380856",
				"75266378",
				"13942488",
				"35548559",
				"41199225",
				"60323446",
				"23143557",
				"09263252",
				"91504693",
				"31595137",
				"41268807",
				"97476467",
				"58561365",
				"97898248",
				"27400436",
				"64790098",
				"29228293",
				"27546915",
				"46008273",
				"90683659",
				"89213288",
				"69488707",
				"01801156",
				"06534832",
				"76929019",
				"00102145",
				"06872240",
				"51101459",
				"30540981",
				"58380351",
				"87294966",
				"17620007",
				"60590314",
				"28855233",
				"36615697",
				"76235881",
				"28606639",
				"53150160",
				"43021709",
				"29659316",
				"77664059",
				"46235805",
				"65792970",
				"79448900",
				"79238360",
				"09312436",
				"81111673",
				"39942393",
				"63293854",
				"64701586",
				"88870472",
				"21406433",
				"17068590",
				"24411136",
				"53567933",
				"32120617",
				"04272953",
				"16730496",
				"04487001",
				"52401682",
				"71925438",
				"11303104",
				"36078052",
				"68296373",
				"49101936",
				"38734516",
				"54968540",
				"52005948",
				"45868758",
				"12515748",
				"31869917",
				"24522982",
				"15513679",
				"27999786",
				"64553758",
				"63520766",
				"88762821",
				"83384028",
				"19021759",
				"62620049",
				"04584669",
				"36408956",
				"66214636",
				"09610209",
				"23600398",
				"09276981",
				"78270896",
				"00603124",
				"34586771",
				"10475716",
				"02035250",
				"95661344",
				"71653513",
				"42022362",
				"74574231",
				"92428357",
				"66546606",
				"56195414",
				"82061257",
				"31061921",
				"24239774",
				"82535071",
				"79267570",
				"93441414",
				"13756637",
				"14293422",
				"40016885",
				"64196211",
				"45006330",
				"44384365",
				"24290901",
				"85735530",
				"84937926",
				"50449801",
				"81662804",
				"39548359",
				"01219194",
				"85793879",
				"10264324",
				"73477772",
				"43934150",
				"85417215",
				"15937687",
				"22431823",
				"91504037",
				"97045903",
				"64204039",
				"38998071",
				"77191820",
				"08258040",
				"22485183",
				"53703495",
				"92771150",
				"87763638",
				"32178151",
				"55358083",
				"07522967",
				"47362955",
				"64902856",
				"77437388",
				"18850502",
				"37501602",
				"18541963",
				"45309027",
				"87430731",
				"28877335",
				"62955560",
				"00327245",
				"56019951",
				"82069992",
				"74206110",
				"09747575",
				"43818347",
				"00283152",
				"21644314",
				"73568879",
				"29420538",
				"78647807",
				"97478681",
				"76522791",
				"65648560",
				"83132132",
				"65050937",
				"50279632",
				"10467190",
				"32357414",
				"97667459",
				"17893215",
				"28877204",
				"60171556",
				"73391376",
				"12431345",
				"61606549",
				"49192025",
				"66976894",
				"83790997",
				"89636765"
			};

			string hex = "b42cd1ef088d5f3eddeadf28f0eb430719ffdb99";
			byte[] key = HotpTotp.KeyFromHexString(hex);

			for (int I = 0; I <= results6.Length - 1; I++) {
				Assert.AreEqual(results6[I], HotpTotp.HOTP(key, I));
			}

			for (int I = 0; I <= results8.Length - 1; I++) {
				Assert.AreEqual(results8[I], HotpTotp.HOTP(key, I, 8));
			}
		}
	}
}
